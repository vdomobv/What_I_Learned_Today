Vue
# 1
Front-end 개발은 Web App 또는 Web Site의 UI/UX를 제작하고 관리하는 과정
Front-end 프레임워크와 라이브러리(React, Angular, Vue.js)를 사용하여 개발 효율성을 높이고, Web App의 복잡성을 관리
Front-end 개발에 사용되는 주요 기술은 HTML, CSS, Javascript

Web App : 웹 브라우저에서 실행되는 어플리케이션 소프트웨어
웹 페이지가 그대로 보이는 것이 아닌 디바이스에 설치된 App처럼 보이는 것
웹 페이지가 디바이스에 맞는 적절한 UX/UI로 표현되는 형태

SPA(Single Page Application)
: 서버에서 최초 1장의 HTML만 전달받아 모든 요청에 대응하는 방식
→ CSR(Client Side Rendering) 방식으로 요청을 처리하기 때문
→ 왜 사용할까?
모든 HTML 페이지를 서버로부터 받아서 표시하지 않아도 됨
	⇒ 클라이언트 - 서버 간 통신(=트래픽) 감소
	⇒ 응답속도가 빨라짐
매번 새 문서를 받아 새로고침 하는 것이 아니라 필요한 부분만 고쳐 나가므로 각 요청이 끊김 없이 진행
BE와 FE의 작업 영역을 명확히 분리할 수 있음 ⇒ 각자 맡은 역할 명확히 분리 ⇒ 협업 용이
→ 단점
첫 구동시 필요한 데이터가 많을 수록 최초 작동 시작까지 오랜 시간이 소요
검색 엔진 최적화(Search Engine Optimization)가 어려움
	서버가 제공하는 것은 텅 빈 HTML
	내용을 채우는 것은 AJAX 요청으로 얻은 JSON 데이터로 클라이언트(브라우저)
	⇒ 대체적으로 HTML에 작성된 내용을 기반으로 하는 검색 엔진에 빈 HTML을 공유하는 SPA 서비스가 노출되기는 어려움

CSR(Client Side Rendering)
: 최초 한 장의 HTML을 받아오는 것은 동일, 단, server로부터 최초로 받아오는 문서는 빈 HTML, 각 요청에 대한 대응을 JavaScript를 사용하여 필요한 부분만 다시 렌더링
필요한 페이지를 서버에 AJAX로 요청
서버는 화면을 그리기 위해 필요한 데이터를 JSON 방식으로 전달
JSON 데이터를 JavaScript로 처리, DOM 트리에 반영(렌더링)
↕
SSR(Server Side Rendering)
: Server가 사용자의 요청에 적합한 HTML을 렌더링 하여 제공하는 방식, 전달 받은 새 문서를 보여주기 위해 브라우저는 새로고침을 진행

MVVM Pattern : 소프트웨어 아키텍처 패턴의 일종
마크업 언어로 구현하는 그래픽 사용자 인터페이스(View)의 개발을 Back-end(model)로부터 분리시켜 view가 어느 특정한 모델 플랫폼에 종속되지 않도록 함
Model = 실제 데이터(JSON)
View = 우리 눈에 보이는 부분(DOM)
ViewModel= View를 위한 Model(Vue)
    - View와 연결되어 Action을 주고 받음
    - Model이 변경되면 View Model도 변경되고 바인딩된 View도 변경됨
    - View에서 사용자가 데이터를 변경하면 View Model의 데이터가 변경되고 바인딩된 다른 View도 변경됨
    - View는 Model을 모르고, Model도 View를 모른다
        == DOM은 Data를 모른다, Data도 DOM을 모른다(독립성 증가, 적은 의존성)

# 2
Directives
v-접두사가 있는 특수 속성에는 값을 할당 할 수 있음(값을 JS표현식으로 작성할 수 있음)
표현식의 값이 변경될 때 반응적으로 DOM에 적용하는 것
ex)
v-on:sumbit.prevent = "onSubmit"
':'을 통해 전달인자를 받을 수 있음
'.'으로 표시되는 특수 접미사 - directive를 특별한 방법으로 바인딩 해야 함

v-show vs v-if
v-show(Expensive inital load, cheap toggle)
 - 표현식 결과와 관계 없이 렌더링 되므로 초기 렌더링에 필요한 비용은 v-if보다 높을 수 있음
 - display 속성 변경으로 표현 여부를 판단하므로 렌더링 후 toggle 비용은 적음
v-if(Cheap initail load, expensive toggle)
 - 표현식 결과가 false인 경우 렌더링 조차 되지 않으므로 초기 렌더링 비용은 v-show보다 낮을 수 있음
 - 단, 표현식 값이 자주 변경되는 경우 잦은 재 렌더링으로 비용이 증가할 수 있음

Vue Style Guide
- Vue의 스타일 가이드 규칙은 우선순위를 기준으로 4가지 범주를 설정
- 우선순위
    A : 필수 (Essential)
        오류를 방지하는 데 도움이 되므로 어떤 경우에도 규칙을 학습하고 준수
    B : 적극 권장 (Strongly Recommended)
        규칙을 어겨도 코드는 여전히 실행되겠지만, 규칙 위반은 드물어야 함
    C : 권장 (Recommended)
        일관성을 보장하도록 임의의 선택을 할 수 있음
    D : 주의 필요 (Use with Caution)
        잠재적 위함 특성을 고려함
중요한 스타일 가이드 A
    - v-for는 항상 key와 함께 사용하기
        내부 컴포넌트의 상태를 일관되게 유지하기 위해 v-for에 항상 key를 사용하기
        데이터의 예측 가능한 행동을 유지 시키기 (객체 불변성)
    - v-for를 쓴 엘리먼트에 절대 v-if를 사용하지 말기
        함께 쓸 수 있다고 생각되는 2가지 경우
            1. 목록의 항목을 필터링할 때 (v-for="user in users" v-if="user.isActive")
                Vue가 디렉티브를 처리할 때, v-for는 v-if보다 우선순위가 높음
                즉, user의 일부분만 렌더링 하고 싶은데도 불구하고, v-for가 우선순위를 가지기 때문에 모든 user에 대해 반복해야 함
                => computed를 사용해서 효율적으로 렌더링 할 수 있또록 함
            2. 숨김 목록의 렌더링을 피할 때 (v-for="user in users" v-if="shouldShowUsers") p.42
                v-if를 컨테이너 엘리먼트로 옮기기, 한번 확인하고 shouldShowUsers가 false인 경우 v-for를 평가하지도 않음


# 3.
Node.js
브라우저를 조작하는 유일한 언어인 자바스크립트 => 브라우저 밖에서는 구동 X
자바스크립트를 구동하기 위한 런타임 환경 Node.js로 인해 브라우저가 아닌 환경에서도 구동할 수 있게 됨

NPM(Node Package Manage: 자바스크립트 패키지 관리자)
Node.js의 기본 패키지 관리자

Vue CLI
- Vue 개발을 위한 표준 도구
- 프로젝트의 구성을 도와주는 역할
- 확장 플러그인, GUI, Bable 등 다양한 tool 제공

Vue CLI 프로젝트 구조
node_modules
- node.js 환경의 여러 의존성 모듈
- python의 venv와 비슷한 역할을 함
    Babel
    - JavaScript compiler
    - 자바스크립트의 파편화, 표준화의 영향으로 작성된 코드의 스펙트펄밍 매우 다양함
        => 자바스크립트의 ES6+ 코드를 구버전으로 번역/변환해주는 도구
    Webpack
    - static module bundler
    - 모듈 간의 의존성 문제를 해결하기 위한 도구
    - 프로젝트에 필요한 모든 모듈을 매핑하고 내부적으로 종속성 그래프를 빌드함
        * Module : 애플리케이션의 기능을 파일 여러개로 분리하여 관리, 각각 하나의 파일이 모듈, 클래스 하나 혹은 특정 복적을 가진 복수의 함수로 구성된 라이브러리 하나로 구성됨
        Module 의존성 문제
            모듈의 수가 많아지고 라이브러리 혹은 모듈 간의 의존성이 깊어지면서 특정한 곳에서 발생한 문제가 어떤 모듈간의 문제인지 파악 어려움
            Webpack은 이 모듈 간의 의존성 문제를 해결하기 위해 등장
        Bundler
            모듈 의존성 문제를 해결해 주는 작업이 Bundling, 도구가 Bundler
    package.json
        프로젝트의 종속성 목록과 지원되는 브라우저에 대한 구성 옵션을 포함
    package-lock.json
        node_modules에 설치되는 모듈과 관련된 모든 의존성을 설정 및 관리
        협업 및 배포 환경에서 정확히 동일한 종속성을 설치하도록 보장하는 표현
        사용할 패키지의 버전을 고정, 개발 과정 간의 의존성 패키지 충돌 방지
        python의 requirements.txt

Component : UI를 독립적이고 재사용 가능한 조각들로 나눈 것, 각 기능별로 분화한 코드 조각
    하나의 app을 구성할 때 중첩된 컴포넌트들의 tree로 구성하는 것이 보편적
    반복되는 UI를 쉽게 처리 가능한
    Component based architecture 특징
        - 관리가 용이 => 유지/보수 비용 감소
        - 재사용성
        - 확장 가능
        - 캡슐화
        - 독립적

Component in Vue : 이름이 있는 재사용 가능한 Vue instance
SFC(Single File Component)
    하나의 .vue 파일이 하나의 Vue instance이고, 하나의 컴포넌트이다.
    Vue instance에서는 HTML, CSS, JavaScript 코드를 한번에 관리
    기능 단위로 작성하는 것이 핵심


# 4
props
- 요소의 속성을 사용하여 데이터 전달
- 부모(상위) 컴포넌트의 정보를 전달하기 위한 사용자 지정 특성
- 자식(하위) 컴포넌트는 props 옵션을 사용하여 수신하는 props를 명시적으로 선언해야 함
- 정적인 데이터를 전달하는 경우 static props라고 명시
- 요소에 속성을 작성하듯이 사용 가능 prop-data-name = "value" (kebab-case)
- 중요 *
    부모에서 넘겨주는 props : kebab-case
    자식에서 받는 props : camelCase
- 각 vue 인스턴스는 같은 data 객체를 공유하므로 새로운 data 객체를 반환하여 사용해야 함
- 단방향 데이터 흐름 : 모든 props는 부모에서 자식으로 단방향 바인딩을 형성, 부모 속성 업데이트 자식으로 흐름, 반대는 아님
    <= 하위 컴포넌트가 실수로 상위 컴포넌트 상태를 변경하여 앱의 데이터 흐름을 이해하기 힘들게 만드는 것을 방지

emit
- 부모 컴포넌트에서 자식 컴포넌트로 데이터를 전달할 때는 이벤트를 발생시킴.
    => 데이터를 이벤트 리스너의 콜백함수의 인자로 전달 => 상위 컴포넌트는 해당 이벤트를 통해 데이터를 받음
- $emit 메서드를 통해 부모 컴포넌트에 이벤트를 발생 => $emit('event-name') 형식으로 사용하며 부모 컴포넌트에 event-name이라는 이벤트가 발생했다는 것을 알림

HTML은 kebab-case, JavaScript는 camleCase

Lifecycle Hooks
각 Vue 인스턴스는 생성과 소멸의 과정 중 단계별 초기화 과정을 거침
각 단계가 트리거가 되어 특정 로직을 실행할 수 있음 ==> Lifecycle Hooks
    created
        Vue instance가 생성된 후 호출됨
        data, computed 등의 설정이 완료된 상태
        서버에서 받은 데이터를 vue instance의 data에 할당하는 로직을 구현하기 적합
        단, mount 되지 않아 요소에 접근할 수 없음
    mounted
        Vue instance가 요소에 mount된 후 호출됨
        mount 된 요소를 조작할 수 있음
        데이터가 변경되어 DOM에 변화를 줄 때 호출됨

Lifecycle Hooks 특징
    - instance마다 각각의 Lifecycle을 가지고 있음
    - Lifecycle Hooks는 컴포넌트별로 정의할 수 있음
    - 부모 컴포넌트의 mounted hook이 실행 되었다고 해서 자식이 mount 된 것이 아니고,
        부모 컴포넌트가 updated hook이 실행 되었다고 해서 자식이 updated 된 것이 아님
    - 부착 여부가 부모-자식 관계에 따라 순서를 가지고 있지 않은 것 <= instance마다 각각의 Lifecycle을 가지고 있기 때문

# 5
상태(State) : 현재에 대한 정보 => 현재 App이 가지고 있는 상태

여러개의 component를 조합해서 하나의 App을 만듦.
각 Component는 독립적이기 때문에 각각의 상태를 가짐.
=> 여러 개의 Component가 같은 상태를 유지할 필요가 있음 => 상태 관리 필요

Centralized Store
중앙 저장소에 각 component의 데이터를 모아서 상태 관리
component의 계층에 상관 없이 중앙 저장소에 접근해서 데이터를 얻거나 변경할 수 있음.
중앙 저장소의 데이터가 변경되면 각각의 component는 해당 데이터의 변화에 방응하여 새로 변경된 데이터를 반영함
규모가 크거나 컴포넌트 중첩이 깊은 프로젝트의 관리가 매우 편리

Vuex: state management pattern + Library for vue.js
중앙 저장소를 통해 상태 관리를 할 수 있도록 하는 라이브러리
데이터가 예측 가능한 방식으로만 변경 될 수 있도록 하는 규칙을 설정하며, Vue의 반응성을 효율적으로 사용하는 상태 관리 기능을 제공

vuex의 핵심 컨셉 4가지
- state : 중앙에서 관리하는 모든 상태 정보
    vue 인스턴스의 data에 해당, 중앙에서 관리하는 모든 상태 정보
    state의 데이터가 변화하면 해당 데이터를 사용(공유)하는 component도 자동으로 다시 렌더링
    $store.state로 접근
- getter : state를 활용해 계산한 새로운 변수 값
    vue 인스턴스의 computed에 해당
    state를 활용하여 계산된 값을 얻고자 할 때 사용, state의 원본 데이터를 건들지 않고 계산된 값을 얻을 수 있음
    첫번째 인자로 state, 두번째 인자로 getter를 받음
- mutations : state를 변경하기 위한 methods
    실제로 state를 변경하는 유일한 방법
    vue 인스턴스의 methods에 해당하지만 mutations에서 호출되는 핸들러(handler) 함수는 반드시 동기적이어야 함
    (비동기 로직으로 mutations를 사용해서 state를 변경하는 경우, state의 변화의 시기를 특정할 수 없기 때문)
    첫 번째 인자로 state를 받으며, component 혹은 Actions에서 commit()메서드로 호출됨
- actions : state 변경을 제외한 나머지 로직, 비동기 작업이 포함될 수 있는 methods
    mutations와 비슷하지만 비동기 작업을 포함할 수 있다는 차이가 있음
    state를 직접 변경하지 않고 commit()메서드로 mutations를 호출해서 state를 변경함
    context 객체를 인자로 받으며, 이 객체를 통해 store.js의 모든 요소와 메서드에 접근할 수 있음
    component에서 dispatch() 메서드에 의해 호출됨

component에서 데이터를 조작하기 위한 데이터의 흐름
    component => (actions) => mutations => state
component에서 데이터를 사용하기 위한 데이터의 흐름
    state => (getters) => component
