- JavaScript란?
: JavaScript는 클라이언트 측 웹(브라우저)에서 실행
JavaScript는 쉽게 배울 수 있고 강력한 스크립트 언어
웹 페이지가 이벤트 발생 시 어떻게 작동하는 지 디자인/프로그래밍
웹 페이지 동작을 제어하는 데 널리 사용
HTML 문서의 콘텐츠를 동적으로 변경할 수 있는 언어
Web이라는 공간에서 채팅, 게임 등 다양한 동작을 할 수 있게 된 기반

- JavaScript Engine
자바스크립트 코드를 실행하는 프로그램 또는 인터프리터
여러 목적으로 자바 스크립트 엔진을 사용하지만, 대체적으로 웹 브라우저에서 사용

- 웹 브라우저의 역할
URL을 통해 Web을 탐색함
HTML/CSS/JavaScript를 이해한 뒤 해석해서 사용자에게 하나의 화면으로 보여줌
웹 서비스 이용 시 클라이언트의 역할을 함. 즉, 웹 페이지 코드를 이해하고, 보여주는 역할

Vanilla JavaScript : 특별하게 웹 브라우저에서 바로 실행할 수 있는 JavaScript문법

* 변수 선언 키워드
1. let: 블록 스코프 지역 변수를 선언, 재할당 가능, 재선언 불가능
2. const : 블록 스코프 읽기 전용 상수를 선언, 재할당 불가능, 재선언 불가능
3. var : 변수를 선언, 재할당 가능, 재선언 가능, 호이스팅 되는 특성으로 인해 예기치 못한 문제 발생 가능

호이스팅 : 변수를 선언 이전에 참조할 수 있는 현상
JavaScript에서 변수들은 실제 실행시에 코드의 최상단으로 끌어올려지게 되며 이러한 이유 때문에
var로 선언된 변수는 선언 시에 undefined로 값이 초기화 되는 과정이 동시에 일어남

* 데이터 타입
- 원시 타입
    1. Number - 정수 또는 실수형 숫자를 표현하는 자료형
        - NaN을 반환하는 경우
            숫자로서 읽을 수 없음       ex) parseInt('어쩌구')
            결과가 허수인 수학 계산식   ex) Math.sqrt(-1)
            피연산자가 NaN             ex) 7 ** NaN
            정의할 수 없는 계산식       ex) 0 * Infinity
            문자열을 포함하면서 덧셈이 아닌 계산식 ex) "가" / 3
    2. String - 문자열을 표현하는 자료형
        \n , `${}` (Template literals)
    3. null - 값이 없음을 나타냄
    4. undefined - 값이 할당되지 않은 변수를 나타냄
    5. Boolean - 참과 거짓을 표현하는 자료형
    6. Symbol - 유일한 값을 표현하는 자료형 ES6에서 추가
- 참조 타입
    1. Object - 이름과 값을 가진 속성(property)들의 집합으로 이루어진 자료구조
        key : 문자열 타입만 가능, key 이름에 띄어쓰기 등의 구분자가 따옴표로 묶어서 표현
        value : 모든 타입(함수포함) 가능
        객체 요소 접근 : . 또는 [] <- 띄어쓰기 같은 구분자가 있으면 대괄호만 가능

        * ES6
        1. 속성명 축약 : key와 할당하는 변수의 이름이 같으면 축약 가능
        2. 메서드명 축약 : function키워드 생략 가능
        3. 계산된 속성명 사용 : 객체를 정의 할 때 key의 이름을 표현식을 이용하여 동적으로 생성 가능
            const key = 'country'
            const value = ['한국', '미국', '일본', '중국']
            const myObj = {
                [key] : value,
            }
            console.log(myObj)
            console.log(myObj.country)
        4. 구조 분해 할당 : 배열 또는 객체를 분해하여 속성을 변수에 쉽게 할당할 수 있는 문법
            const userInformation = {
                name : 'ssafy kim',
                userId : 'ssafyStudent1234',
                email : 'ssafy@ssafy.com'
            }

            const name = userInformation.name
            const {userId, email} = userInformation
        5. 객체 전개 구문(Spread Operator) : 배열과 마찬가지로 전개구문을 사용해 객체 내부에서 객체 전개 가능
            const obj = {b:2, c:3, d:4}
            const newObj = {a:1, ...obj, e:5}
            console.log(newObj) // {a:1, b:2, c:3, d:4, e:5}
    2. Array - 여러 개의 값을 순서대로 저장하는 자료구조
        키와 속성들을 담고 있는 참조 타입의 객체, 순서를 보장하는 특징, 주로 대괄호 이용, array.length
    3. function - function 키워드를 통해 생성하며, 호출 시 실행될 코드를 정의, 매개변수와 인자의 개수 불일치 허용
        함수선언식(declaration) - 호이스팅 발생, 익명함수 불가능
            function add(num1, num2){
                return num1+num2
            }
        함수표현식(expression) - 호이스팅 없음, 익명함수 가능
            const add = function (num1, num2) {
                return num1 + num2
            }
        * 화살표 함수 (Arrow Function) : 함수를 비교적 간결하게 정의할 수 있는 문법 ****중요 다시봐라
            - function키워드 생략 가능
            - 매개변수가 하나 뿐이라면 매개변수 () 생략 가능 
            - 함수의 내용이 한줄이라면 {} , return 생략 가능
            - 항상 익명함수
            - 화살표 함수는 호출의 위치와 상관 없이 상위 스코프를 가리킴
            - Lexical Scope : 어디에 선언하였는지에 따라 결정(****다시봐라)

연산자
비교 연산자
    동등연산자(==) : 암묵적 타입 변환을 통해 타입을 일치 시킨 후, 두 피연산자가 같은 값으로 평가되는지 비교 후 boolean값을 반환
    일치연산자(===) : 두 피연산자의 값과 타입이 모두 같은 경우 true를 반환, 암묵적 타입 변환X
논리 연산자
    and : &&
    or : ||
    not : !
스프레드 연산자 : 배열이나 객체를 전개하여 각 요소를 개별적인 값으로 분리하는 연산자
    배열과의 사용 (배열 복사)
        let parts = ['어깨', '무릎']
        let lyrics = ['머리', ...parts ,'발']
        console.log(lyrics) ==> ['머리', '어깨', '무릎', '발']
    함수와의 사용 (Rest parameters) : 정해지지 않은 수의 매개변수를 배열로 받을 수 있음
반복문
for ... in : 객체의 속성을 순회할 때 사용, 속성이름을 통해 반복, 배열도 순회 가능하지만 인덱스 순으로 순회한다는 보장 없음
for ... of : 반복 가능한 객체(Array, Set, String)를 순회할 때 사용, 속성 값을 통해 반복

this : 어떠한 object를 가리키는 키워드, 함수를 호출할 때 함수가 어떻게 호출되었는지에 따라 동적으로 결정됨
    - 전역 문맥에서 this : window   -> 전역 객체는 모든 객체의 유일한 최상위 객체를 의미
    - 함수 문맥에서 this : 함수를 호출한 방법에 따라 다름
        - 단순 호출 : 전역객체(window)
        - method : 객체의 메소드 내에서 호출하면, 객체의 메서드이므로 해당 객체가 바인딩
        - Nested(****다시봐라)
            단순 호출 방식으로 사용되었기 때문에 forEach의 콜백 함수에서 전역 객체 window를 가리킴
            const myObj = {
                numbers : [1,2],
                myFunc() {
                    console.log(this) // myObj
                    this.numbers.forEach(function (num) {
                        console.log(num) // 1
                        console.log(this) // window
                    })
                }
            }
            ====================================
            const myObj = {
                numbers : [1,2],
                myFunc() {
                    console.log(this) // myObj
                    this.numbers.forEach((num) => {
                        console.log(num) // 1
                        console.log(this) // myObj
                    })
                }
            }

콜백 함수: 다른 함수의 인자로 전달되는 함수

Array Helper Methods
1. forEach : element, index, array 로 구성, 반환값 없음
    const colors = ['red', 'blue', 'green']
    colors.forEach(function(color) {
        console.log(color)
    })
2. map : 콜백 함수의 반환 값을 요소로 하는 새로운 배열 반환
    const numbers = [1,2,3]
    const doubleNumbers = numbers.map(function(number){
        return number * 2
    })
    console.log(doubleNumbers) // [2,4,6]
3. filter : 콜백 함수의 반환 값이 true인 요소들만 모아서 새로운 배열 반환
    const products = [
        {name: 'cucumber', type:'vegetable'},
        {name: 'carrot', type:'vegetable'},
        {name: 'apple', type:'fruit'}
    ]
    const fruits = products.filter(function(product) {
        return product.type == 'fruit'
    })
4. reduce : 인자로 주어지는 함수를 배열의 각 요소에 대해 한번 씩 실행해서 하나의 결과 값을 반환
            주요 매개변수
                acc : 이전 callback 함수의 반환 값이 누적되는 변수
                initialValue (optional) : 최초 callback함수 호출시 acc에 할당되는 값, default는 배열으 첫번째 값
    const tests = [90, 90, 80, 77]
    const sum = tests.reduce(function(total, x){
        return total + x
    }, 0)  // 결과 : 337, 0(initialValue) 생략 가능

    const sum = test.reduce((total, x) => total + x, 0) // 337
5. find : 콜백 함수의 반환 값이 true면, 조건을 만족하는 첫번째 요소를 반환, 없으면 undefined 반환
    const avengers = [
        {name:'Tony', age : 45},
        {name:'Thor', age : 32},
        {name:'Steve', age : 40}
    ]
    const avenger = avergers.find(function(avenger){
        return avenger.name === 'Tony Stark'
    })
    console.log(avenger) // {name: 'Tony Stark', age : 45}
6. some : 배열의 요소 중 하나라도 주어진 판별 함수를 통과하면 true 반환, 빈배열은 무조건 false
    const arr = [1,2,3,4,5]
    const result = arr.some((elem) => {
        return elem % 2 === 0
    }) // true
7. every : 배열의 모든 요소가 주어진 판별 함수를 통과하면 true 반환, 빈배열은 항상 true
    const arr = [1,2,3,4,5]
    cons result = arr.every((elem) => {
        return elem % 2 == 0
    }) // false

JSON(JavaScript Object Notation)
: Key-Value 형태로 이루어진 자료 표기법, JSON은 형식이 있는 문자열 ==> JSON을 Object로 사용하기 위해서는 변환 작업이 필요
    const jsObject = {
        coffee : 'Americano',
        iceCream : 'Cookie and cream',
    }
    const objToJson = JSON.stringify(jsObject)
    console.log(objToJson) // {"coffee":"Americano", "iceCream":"Cookie and cream"}
    console.log(typeof objToJson) // string

    const jsonToObj = JSON.parse(objToJson)
    console.log(jsonToObj) // {coffee:'Americano', iceCream: 'Cookie and cream'}
    console.log(typeof jsonToobj) // object

Browser APIs : 웹 브라우저에 내장된 API로, 웹 브라우저가 현재 컴퓨터 환경에 관한 데이터를 제공하거나, 오디오를 재생하는 등 여러가지 유용하고 복잡한 일을 수행할 수 있게 함
종류: DOM, Geolocation API, WebGL 등

브라우저가 웹 페이지를 불러오는 과정
: 웹 페이지를 브라우저로 불러오면, 브라우저는 코드(HTML, CSS, JavaScript)를 실행 환경(브라우저 탭)에서 실행
JavaScript는 DOM API를 통해 HTML과 CSS를 동적으로 수정, 사용자 인터페이스를 업데이트 하는 일에 가장 많이 쓰임

DOM(문서객체모델 : Document Object Model)
: 문서의 구조화된 표현을 제공하며 프로그래밍 언어가 DOM 구조에 접근할 수 있는 방법을 제공
    - 문서 구조, 스타일, 내용 등을 쉽게 변경할 수 있게 도움
    - HTML 콘텐츠를 추가, 제거, 변경하고, 동적으로 페이지에 스타일을 추가하는 등 HTML/CSS를 조작할 수 있음
  HTML 문서를 구조화하여 각 요소를 객체(object)로 취급
  단순한 속성 접근, 메서드 활용 뿐만 아니라 프로그래밍 언어적 특성을 활용한 조작이 가능함
  DOM 메서드를 사용하면 프로그래밍적으로 트리에 접근할 수 있고 이를 통해 문서의 구조, 스타일, 컨텐츠를 변경할 수 있음
  문서를 논리 트리로 표현, DOM에서 모든 것은 Node(Document Node, Element Node, Text Node, Attribute Node)
  DOM 메서드를 사용하면 프로그래밍적으로 트리에 접근할 수 있고 이를 통해 문서의 구조, 스타일, 컨텐츠를 변경할 수 있음
  웹 페이지는 일종의 문서이다. 이 문서는 웹 브라우저를 통해 그 내용이 해석되어 웹 브라우저 화면에 나타나거나 HTML코드 자체로 나타나기도 함
  DOM은 동일한 문서를 표현, 저장, 조작하는 방법을 제공, 웹 페이지의 객체 지향 표현이며, JavaScript와 같은 스크립트 언어를 이용해 DOM을 수정할 수 있음

window object : DOM을 표현하는 창, 가장 최상위 객체, 탭이 있는 브라우저에서 각가의 탭을 각각의 widow 객체로 나타냄
    window.open()
    window.alert()
    window.print()

document object : 브라우저가 불러온 웹 페이지, 페이지 컨텐츠의 진입점 역할을 하며, <body> 등과 같은 수 많은 다른 요소들을 포함하고 있음
    document.querySelector(selector)
    document.querySelectorAll(selector)
    document.createElement(tagName)
    HTMLElement.innerText
    Node.appendChild()
    Node.removeChild()
    Element.getAttribute(attributeName)
    Element.setAttribute(name, value)
    Element.classList, Element.style 등을 통해 기존 속성 유지한 채로 새로운 값 추가 가능

Event : HTML 요소에서 발생하는 모든 상황을 의미
Event object : 네트워크 활동이나 사용자와의 상호작용 같은 사건의 발생을 알리기 위한 객체, 이벤트가 발생했을 때 생성되는 객체
Event.addEventListener('type', handler function(){

})
==> Event를 type하면 handler function을 한다.

Event 전파 : DOM 요소에서 발생한 이벤트가 상위 노드에서 하위노드, 혹은 하위노드에서 상위 노드로 전파되는 현상
event.preventDefault() : 현재 Event의 기본 동작을 중단, 작동하지 않게 막음

addEventListener에서의 this는 콜백 함수는 function 키워드의 경우 addEventListener를 호출한 대상을 뜻함

동기(Synchronous) : 모든 일을 순서대로 하나씩 처리하는 것
비동기(Asynchronous) : 작업을 시작한 후 결과를 기다리지 않고 다음 작업을 처리하는 것 (병렬적 수행)
                        시간이 필요한 작업들은 요청을 보낸 뒤 빨리 오는 작업부터 처리
    비동기를 사용하는 이유: 사용자 경험
        동기식 처리는 특정 로직이 실행되는 동안 다른 로직 실행을 차단하기 때문에 마치 프로그램이 응답하지 않는 듯한 사용자 경험을 만들게 됨
        비동기로 처리한다면 먼저 처리되는 부분부터 보여줄 수 있으므로, 사용자 경험에 긍정적인 효과를 볼 수 있음

Thread : 작업을 처리할 때 실제로 작업을 수행하는 주체
JavaScript는 한번에 하나의 일만 수행할 수 있는 Single Thread 언어 <--> multi-Thread
 ==> 비동기 처리를 할 수 있도록 도와주는 환경(Runtime) 필요
    브라우저 환경에서의 비동기 동작은 아래의 요소들로 구성
        1. JavaScript Engine의 Call Stack : 요청이 들어올때마다 순차적으로 처리하는 Stack(LIFO)
        2. Web API : 브라우저 제공 runtime 환경, 시간이 소요되는 작업을 처리
        3. Task Queue : 비동기 처리된 Callback 함수가 대기하는 Queue(FIFO)
        4. Event Loop : Call Stack과 Task Queue를 지속적으로 모니터링
                        Call Stack이 비어 있는지 확인후 비어 있다면, Task Queue에서 대기중인 오래된 작업을 Call Stack으로 Push

Axios : JavaScript의 HTTP 웹 통신을 위한 라이브러리, 확장 가능한 인터페이스와 쉽게 사용할 수 있는 비동기 통신 기능을 제공
axios.get('요청할 URL')
    .then(성공하면 수행할 콜백 함수)
    .catch(실패하면 수행할 콜백 함수)

비동기 처리의 단점
비동기 처리의 핵심은 Web API로 들어오는 순서가 아니라 작업이 완료되는 순서에 따라 처리한다는 것
==> 실행 순서 불명확, 실행 결과 예상하면서 코드를 작성할 수 없음
==> 콜백함수 사용 ==> 콜백지옥, 가독성을 해치고, 유지보수가 어려워짐

프로미스 : 콜백지옥 문제를 해결하기 위해 등장한 비동기 처리를 위한 객체
비동기 작업의 완료 실패를 나타내는 객체
비동기 콜백 작성 스타일과 달리 Promise가 보장하는 특징
1. callback 함수는 JavaScript의 Event Loop가 현재 실행중인 Call Stack을 완료하기 이전에는 절대 호출되지 않음
2. 비동기 작업이 성공하거나 실패한 뒤에 .then() 메서드를 이용하여 추가한 경우에도 1번과 같이 동작
3. .then()을 여러 번 사용하여 여러 개의 callback 함수를 추가할 수 있음
work1()
    .then((result1) => {
        return result2
    })
    .then((result2) => {
        return result3
    })
    .catch((error) =>{
        console.log(error)
    })

AJAX (비동기 통신 웹 개발 기술, Asynchronous JavaScript And XML)
: 비동기 통신을 이용하면 화면 전체를 새로고침 하지 않아도 서버로 요청을 보내고, 데이터를 받아 화면의 일부분만 업데이트 가능
특징
    페이지 새로고침 없이 서버에 요청
    서버로부터 응답을 받아 작업을 수행

